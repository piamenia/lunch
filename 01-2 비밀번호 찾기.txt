비밀번호 찾기
	로그인폼에서 이메일을 입력하고 비밀번호찾기 링크 클릭
	-> 임시비밀번호를 만들어서 해당 계정에 업데이트
	-> 이메일로 비밀번호를 변경해서 사용하도록 임시비밀번호와 개인정보 변경 페이지 링크주소 전송
	-> 링크를 클릭하면 로그인이 안돼있기 때문에 임시비밀번호로 로그인한 후 개인정보 바꾸는 페이지로 이동하도록

	login.jsp 파일에 비밀번호 찾기 링크 추가
		<a href="javascript:findpw()" class="btn btn-danger btn-block m-t-md">비밀번호 찾기</a>

	비밀번호찾기를 누르면 호출되는 함수
		emailcheck를 활용
		
		// 비밀번호찾기를 누르면 호출되는 함수
		function findpw(){
			email = document.getElementById("email").value;
			emaildiv = document.getElementById("emaildiv");
			if(email.trim() == ""){
				emaildiv.innerHTML = "이메일을 입력해주세요.";
				emaildiv.style.color = 'red';
				document.getElementById("email").focus();
			} else {
				$.ajax({
					url:'emailcheck',
					data:{'email':email},
					dataType:'json',
					success:function(data){
						//alert(data);
						if(data.result==true){
							// 이메일이 존재하지 않는 경우
							emaildiv.innerHTML = "존재하지 않는 이메일입니다.";
							emaildiv.style.color = 'red';
						}else{
							// 이메일이 존재하는 경우
							location.href="findpw?email="+email;
						}
					}
				});
			}
		}
		
	servlet-context.xml 파일에 메일보내기 bean 설정
		<!-- 이메일 bean -->
		<beans:bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
			<beans:property name="host" value="smtp.gmail.com" />
			<beans:property name="port" value="587" />
			<beans:property name="username" value="lunch00lunch@gmail.com" />
			<beans:property name="password" value="rhksflwk123!@#"/>
			<beans:property name="defaultEncoding" value="utf-8" />
			<beans:property name="javaMailProperties">
				<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
				</beans:props>
			</beans:property>
		</beans:bean>
	
	MemberDao의 update 메소드의 리턴타입을 int로 변경
		public int update(Member member) {
			return sqlSession.update("member.update", member);
		}
	
	MemberService 인터페이스의 update 메소드의 리턴타입을 boolean으로 변경
		public boolean update(HttpServletRequest request);
	
	MemberServiceImpl 클래스의 update 메소드도 리턴타입을 boolean으로 변경
		@Override
		public boolean update(HttpServletRequest request) {
			boolean result = false;
			
			// 파라미터 읽기
			String email = request.getParameter("email");
			String nickname = request.getParameter("nickname");
			String newpw = request.getParameter("newpw");
			
			// Dao의 파라미터 만들기
			Member member = new Member();
			// 패스워드는 암호화해서 저장
			member.setEmail(email);
			member.setNickname(nickname);
			member.setPw(BCrypt.hashpw(newpw, BCrypt.gensalt(10)));
		
			//Dao의 메소드 호출
			int r = memberDao.update(member);
			if(r>0) result = true;
			
			return result;
		}

	MemberService에 비밀번호 찾기 메소드 선언
		public Member findpw(HttpServletRequest request);
		
	MemberServiceImpl 에서 html메일을 보내기 위해 JavaMailSender 클래스를 주입받고 비밀번호 찾기 메소드 구현
		@Autowired
		private JavaMailSender mailSender;

		@Override
		public boolean findpw(HttpServletRequest request) {
			boolean result = false;
			String email = request.getParameter("email");
			String newpw = "";
			try {
				// 임시 비밀번호 만들기 - 8자리 소대문자,숫자
				StringBuilder temp = new StringBuilder();
				Random rnd = new Random();
				for (int i = 0; i < 8; i = i + 1) {
					int cases = rnd.nextInt(3);
					switch (cases) {
					case 0:
						// 소문자
						temp.append((char) ((int) (rnd.nextInt(26)) + 97));
						break;
					case 1:
						// 대문자
						temp.append((char) ((int) (rnd.nextInt(26)) + 65));
						break;
					case 2:
						// 숫자
						temp.append((char) ((int) (rnd.nextInt(10)) + 48));
						break;
					}
					System.out.println(temp);
				}
				newpw = temp.toString();
			}catch(Exception e) {
				System.out.println(e.getMessage());
				e.printStackTrace();
			}
			Member member = memberDao.getMember(email);
			member.setPw(BCrypt.hashpw(newpw, BCrypt.gensalt(10)));
			int r = memberDao.update(member);
			if(r>0) result = true;
			
			String title = "임시비밀번호를 발급했습니다. 비밀번호를 변경해서 사용하세요.";
			String contents = "임시비밀번호는 "+ newpw +" 입니다."
					+ "<br>"
					+ "반드시 비밀번호를 다시 변경해서 사용하세요."
					+ "<br>"
					+ "<a href=\"http://192.168.0.218:8989/lunch/member/update\">비밀번호 변경하러 가기</a>";
			
			try {
				// 매일보내기 객체
				MimeMessage message = mailSender.createMimeMessage();
				message.setFrom(new InternetAddress("lunch00lunch@gmail.com"));
				// 받는사람
				message.setRecipient(RecipientType.TO, new InternetAddress(email));
				// 제목
				message.setSubject(title);
				// 내용
				message.setContent(contents, "text/html; charset=UTF-8");
				// 메일 보내기
				mailSender.send(message);
			} catch (Exception e) {
				System.out.println(e.getMessage());
				e.printStackTrace();
			}
			
			return result;
		}
		
	MemberController에 member/findpw GET 요청 처리 메소드
		@RequestMapping(value="member/findpw", method=RequestMethod.GET)
		public String findpw(HttpServletRequest request, RedirectAttributes attr) {
			memberService.findpw(request);
			attr.addFlashAttribute("msg","임시비밀번호가 이메일로 전송되었습니다.");
			return "redirect:/lunch";
		}
		
	servlet-context.xml 파일에 권한 인터셉터에 member/update 추가
		<mapping path="/member/update" />