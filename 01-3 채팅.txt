웹소켓을 이용한 채팅
	pom.xml 파일에 Spring Web Socket 라이브러리 추가
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		
	채팅을 위한 웹소켓서버 클래스 생성
		package kr.co.lunch.service;

		import java.util.ArrayList;
		import java.util.List;

		import org.springframework.stereotype.Component;
		import org.springframework.web.socket.CloseStatus;
		import org.springframework.web.socket.TextMessage;
		import org.springframework.web.socket.WebSocketSession;
		import org.springframework.web.socket.handler.TextWebSocketHandler;

		@Component
		public class ChatHandler extends TextWebSocketHandler {
			// 접속한 클라이언트의 세션을 저장할 Map
			// 1개만 만들어져야하기 떄문에 static
			private static List<WebSocketSession> list = new ArrayList<>();
			
			// 클라이언트가 접속했을 때 호출될 메소드
			@Override
			public void afterConnectionEstablished(WebSocketSession session) throws Exception {
				list.add(session);
			}
			// 클라이언트가 메시지를 전송헀을 때 메소드
			@Override
			protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
				// 전송된 메시지를 list의 모든 세션에게 전송
				String msg = message.getPayload();
				for(WebSocketSession temp : list) {
					temp.sendMessage(new TextMessage(msg));
				}
			}
			// 클라이언트가 접속을 해제했을 때 메소드
			@Override
			public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
				list.remove(session);
			}

		}

		
	servlet-context.xml 파일에 websocket 네임스페이스 추가
		
	servlet-context.xml 파일에 websocket 등록 태그 추가
		<!-- 웹소켓 등록 -->
		<websocket:handlers>
			<websocket:mapping handler="chatHandler" path="/chat-ws"/>
		</websocket:handlers>
		
	header.jsp 파일에 채팅화면보기 링크를 추가
		<li role="presentation"><a href="${pageContext.request.contextPath }/member/chat">채팅</a></li>
		
	채팅화면은 로그인했을 때만 사용할 수 있도록 servlet-context.xml 파일에 권한인터셉터 추가
		<mapping path="/member/chat" />
		
	MemberController에서 member/chat GET 요청 처리
		@RequestMapping(value="member/chat", method=RequestMethod.GET)
		public String chat(HttpServletRequest request) {
			return "member/chat";
		}
		
	views/member/chat.jsp 파일 생성
		채팅화면 구성
			채팅화면, 메시지입력창, 전송버튼, 현재접속자
			
			<div class="row">
				<div class="col-md-offset-1 col-md-6">
					<label for="chatwindow">채팅 화면</label>
					<div><textarea class="form-control" id="chatwindow" rows="15" readonly style="resize:none; overflow:auto"></textarea></div>
					<div>
						<div class="input-group">
							<input type="text" class="form-control" id="msg" placeholder="내용을 입력하세요.">
							<span class="input-group-btn">
								<button class="btn btn-default" type="button" id="send">보내기</button>
							</span>
						</div>
					</div>
				</div>
				<div class="col-md-4">
					<label for="clients">접속자</label>
					<textarea class="form-control" id="clients" rows="16" readonly style="resize:none; overflow:auto"></textarea>
				</div>
			</div>
			
		채팅화면 스크립트
			//websocket = new WebSocket("ws://182.222.11.113:8080/lunch/chat-ws");
			websocket = new WebSocket("ws://localhost:8989/lunch/chat-ws");
			// 웹소켓에 이벤트가 발생헀을 때 호출될 함수 등록
			websocket.onopen = onOpen;
			websocket.onmessage = onMessage;

			nickname = '${member.nickname}';
			msg = document.getElementById("msg");

			// 보내기 버튼을 클릭하면 호출되는 함수
			document.getElementById("send").addEventListener("click",function(){
				send();
			})
			// 엔터키를 눌러도 메시지 전송
			msg.onkeydown = function(){
				if(event.keyCode==13){
					send();
				}
			}
			function send(){
				websocket.send(nickname+" : "+msg.value);
				msg.value = "";
				msg.focus;
			}
			function onOpen(){
				websocket.send(nickname+" 님이 입장하셨습니다.");
			}
			function onMessage(e){
				data = e.data;
				chatwindow = document.getElementById("chatwindow");
				chatwindow.value = chatwindow.value + data + "\n";
				chatwindow.scrollTop = chatwindow.scrollHeight;
			}
			// 페이지를 벗어나면 웹소켓에서 연결해제
			$(window).on("beforeunload", function(){
				websocket.send(nickname+" 님이 퇴장하셨습니다.");
				websocket.close();
			});
			
	채팅페이지를 보고있지 않을 때 메시지가 오면 알려주기
		채팅 페이지에 최초로 접속하면 알림 기능을 허용할지 여부 확인
			// 알림 기능 허용여부 확인
			if(window.Notification){
				Notification.requestPermission();
			}
		
		onMessage 함수에 현재 윈도우가 숨겨져(비활성화) 있으면 notify 함수 호출
			if(document.hidden){
				notify();
			}
			
		notify 함수
			// 메시지가 오면 알림 띄워주기
			function notify(){
				if(Notification.permission != 'granted'){
					alert('알림이 꺼져있습니다.');
				}else{
					notification = new Notification('LUNCH! 채팅방', {
						icon: "http://chittagongit.com//images/notification-icon/notification-icon-21.jpg",
						body: "새로운 메시지가 있습니다."
					});
					
					// 알림을 클릭하면 알림이 뜬 페이지를 보여주고 알림 닫기
					notification.onclick = function(){
						$(window).focus();
						notification.close();
					};
					
					// 아무것도 하지 않으면 5초후에 알림 닫기
					setTimeout(function(){
						notification.close();
					},5000);
				}
			}

	현재 접속자 보여주기
		페이지 진입
		-> 이미 접속해있는 사람의 닉네임을 모두 접속자화면에 출력
		-> 내 닉네임을 웹소켓에 전송해서 현재 접속해있는 사람들의 접속자화면에 모두 출력
		
		채팅페이지에 진입하면 접속했다는 메시지를 구분할수 있게 보내주고
		메시지를 받아서 접속했다는 메시지인지 채팅메시지인지 구분해서 뿌려줌
		클라이언트도 서버로부터 메시지를 받았을 때 구분해서 처리
		
		chat.jsp의 onOpen 함수에 코드 추가
			// 접속자 화면에 표시하기 위해 보내는 메시지
			// 다른 모든 메시지는 nickname으로 시작하기 때문에 nickname으로 하지 못하는 텍스트로 시작하는 메시지로 전송
			// nickname은 영문, 숫자, 한글만 사용
			websocket.send("!!"+nickname);
			
		ChatHandler에서 WebSocketSession을 저장하던 list를 Map의 List로 변경
			// 닉네임과 세션을 모두 저장할 수 있게 Map의 List로 변경
			private static List<Map<String,Object>> list = new ArrayList<>();
			
		접속했을 때 리스트에 세션을 저장하지 않고 구분메시지를 받아서 저장
			// 클라이언트가 접속했을 때 호출될 메소드
			@Override
			public void afterConnectionEstablished(WebSocketSession session) throws Exception {
				//System.out.println(session);
				// 접속했을 때 리스트를 저장하지 않고 구분메시지를 받아서 저장
		//		list.add(session);
			}
			
		클라이언트가 메시지를 전송했을 때 메소드 수정
			// 클라이언트가 메시지를 전송했을 때 메소드
			@Override
			protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
				String msg = message.getPayload();
				// 받은 메시지가 접속자화면에 표시하기 위한 메시지인지 채팅메시지인지 구분
				int a = msg.indexOf("!!");
				// 접속자화면에 표시하기위한 메시지라면
				if(a >= 0) {
					// map 에 닉네임과 세션을 저장하고 list에 저장
					String nickname = msg.split("!!")[1];
					Map<String, Object> map = new HashMap<>();
					map.put("session", session);
					map.put("nickname", nickname);
					list.add(map);
		//			System.out.println(list);
					// 저장했으면 리스트에 저장된 닉네임에 구분할 수 있는 기호를 붙여서 모든 세션에게 전송
					// 모든 리스트를 순회하면서
					for(int i=0; i<list.size(); i++) {
						// 해당하는 맵의 세션
						Map<String, Object> tempmap1 = list.get(i);
						WebSocketSession wss = (WebSocketSession)tempmap1.get("session");
						// 모든 리스트를 순회하면서
						for(int j=0;j<list.size(); j++) {
							// 해당하는 맵의 닉네임
							Map<String, Object> tempmap2 = list.get(j);
							String client = (String)tempmap2.get("nickname");
							// 을 각 세션에게 전송
							wss.sendMessage(new TextMessage("!!"+client));
						}
					}
				}
				// 채팅메시지라면
				else {
					// 전송된 메시지를 list의 모든 세션에게 전송
					for(int i=0; i<list.size(); i++) {
						Map<String, Object> temp = list.get(i);
						WebSocketSession wss = (WebSocketSession)temp.get("session");
						wss.sendMessage(new TextMessage(msg));
					}
				}
			}
			
		클라이언트가 접속을 종료했을 때 코드도 수정
			// 클라이언트가 접속을 해제했을 때 메소드
			@Override
			public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
				// System.out.println(list);
				// 접속 종료한 세션의 닉네임을 저장할 변수
				String nickname = "";
				// 리스트에서 세션을 제거
				for(int i=0; i<list.size(); i++) {
					Map <String, Object> map = list.get(i);
					WebSocketSession wss = (WebSocketSession)map.get("session");
					// 접속종료한 세션의 닉네임 저장
					nickname = (String)map.get("nickname");
					if(wss.getId() == session.getId()) {
						list.remove(map);
					}
				}
				// System.out.println("삭제후 "+ list);
				// 나머지 세션에게 삭제된 세션의 닉네임을 구분기호와 함께 전송
				for(int i=0; i<list.size(); i++) {
					Map <String, Object> map = list.get(i);
					WebSocketSession wss = (WebSocketSession)map.get("session");
					String msg = "@@" + nickname;
					wss.sendMessage(new TextMessage(msg));
				}
		//		list.remove(session);
			}
			
		chat.jsp 파일의 onMessage 함수 수정
			function onMessage(e){
				data = e.data;
				clients = document.getElementById("clients");
				chatwindow = document.getElementById("chatwindow");
				// 메시지 구분
				// 접속자 추가 메시지
				if(data.indexOf("!!") >= 0){
					//clients.value = "";
					data = data.split("!!")[1];
					//alert(data)
					if(clients.value.indexOf(data)<0){
						clients.value = clients.value + data + "\n";
					}
				}
				// 접속자 제거 메시지
				else if(data.indexOf("@@") >= 0){
					//console.log(data)
					data = data.split("@@")[1];
					//alert(data);
					clientslist = clients.value;
					//console.log(clientslist)
					ar = clientslist.split("\n");
					//console.log(ar)
					for(i=0;i<ar.length;i++){
						if(ar[i]==data){
							//console.log(data)
							//console.log(ar[i])
							ar.splice(i)
						}
					}
					//console.log(ar)
					clientslist = "";
					for(i=0;i<ar.length;i++){
						clientslist += ar[i] +'\n';
					}
					clients.value = clientslist;
				}
				// 채팅 메시지
				else{
					chatwindow.value = chatwindow.value + data + "\n";
					chatwindow.scrollTop = chatwindow.scrollHeight;
					if(document.hidden){
						notify();
					}
				}
			}



















































