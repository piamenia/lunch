다른사람의 식당 보기
	다른사람의 membercode를 입력하면 그 사람의 식당리스트를 볼 수 있도록 해주기
	
	자신의 membercode를 다른사람에게 알려줘야함
		header.jsp 파일에 자신의 membercode 보기 링크 추가
			<li role="presentation" style="float:right"><a href="${pageContext.request.contextPath}/member/code">코드보기</a></li>
			
		링크가 많아져서 드롭다운메뉴로 변경
			<li role="presentation" class="dropdown" style="float:right">
				<a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-expanded="false">
						${member.nickname }님<span class="caret"></span>
				</a>
				<ul class="dropdown-menu" role="menu" id="member" style="left:-62%">
					<li role="presentation"><a href="${pageContext.request.contextPath}/member/update">회원정보 수정</a></li>
					<li role="presentation"><a href="${pageContext.request.contextPath}/member/code">코드보기</a></li>
					<li role="presentation"><a href="${pageContext.request.contextPath}/member/logout">로그아웃</a></li>
				</ul>
			</li>
			
		다른사람의 식당보기도 로그인해야 할 수 있도록 servlet-context.xml 파일에 설정			
			<mapping path="/lunch/others"/>
			
		MemberController에서 member/code GET 요청 처리
			@RequestMapping(value="member/code", method=RequestMethod.GET)
			public String code(HttpServletRequest request) {
				return "member/code";
			}
			
		views/member/code.jsp 파일 생성
			membercode 보여주기
			
			<script src="src/main/webapp/resources/clipboard.min.js"></script>
			<div style="width:50%; margin:auto; text-align:center">
				<h3>${member.nickname }님의 코드는 <input onclick="javascript:copy()" type="button" id="code" class="btn btn-info btn-lg" value="${member.membercode }"> 입니다.<br><br>
				버튼을 클릭하면 복사할 수 있습니다.</h3>
			</div>
			<script>
			function copy(){
				window.prompt("복사하려면 Ctrl+C, Enter 를 입력하세요.", '${member.membercode}');
			}
			</script>
			
	다른사람의 코드를 입력하고 식당목록 보기
		header.jsp 파일에 다른사람의 식당보기 링크 추가
			<li><a href="${pageContext.request.contextPath }/lunch/others">다른사람의 식당 보기</a></li>
			
		RestaurantController에서 lunch/others GET 요청 처리
			@RequestMapping(value="lunch/others", method=RequestMethod.GET)
			public String others() {
				return "lunch/others";
			}
			
		lunch/others.jsp 파일 생성
			select.jsp 파일에 코드입력 추가, 입력받은 코드가 존재하는지 확인, 존재하면 목록을 보여주거나 랜덤선택
			
			화면 디자인
			<div class="row">
				<div class="form-group container col-sm-offset-1 col-sm-10 well">
					<form class="form-horizontal col-sm-12">
						<legend><h2 align="center">LUNCH! <small>다른 사람의 식당 보기</small></h2></legend>
						<div class="form-group">
							<label for="code" class="col-sm-2 control-label">코드 입력</label>
							<div class="col-sm-10">
								<input type="text" id="code" class="form-control">
							</div>
						</div>
						<div class="form-group">
							<label for="foodstyle" class="col-sm-2 control-label">음식 종류</label>
							<div class="col-sm-10">
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle1" value="한식" checked>한식
								</label>
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle2" value="일식">일식
								</label>
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle3" value="중식">중식
								</label>
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle4" value="양식">양식
								</label>
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle5" value="분식">분식
								</label>
								<label class="radio-inline">
									<input type="radio" name="foodstyle" id="foodstyle6" value="기타">기타
								</label>
							</div>
						</div>
						<div class="form-group">
							<label for="distance" class="col-sm-2 control-label">거리(이하)</label>
							<div class="col-sm-10">
								<label class="radio-inline">
									<input type="radio" name="distance" id="distance5" value="1" checked>멂
								</label>
								<label class="radio-inline">
									<input type="radio" name="distance" id="distance4" value="2">멀지는 않음
								</label>
								<label class="radio-inline">
									<input type="radio" name="distance" id="distance3" value="3">적당함
								</label>
								<label class="radio-inline">
									<input type="radio" name="distance" id="distance2" value="4">가까운 편
								</label>
								<label class="radio-inline">
									<input type="radio" name="distance" id="distance1" value="5">가까움
								</label>
							</div>
						</div>
						<div class="form-group">
							<label for="tasty" class="col-sm-2 control-label">맛(이상)</label>
							<div class="col-sm-10">
								<label class="radio-inline">
									<input type="radio" name="tasty" id="tasty1" value="1" checked>으.. 노맛
								</label>
								<label class="radio-inline">
									<input type="radio" name="tasty" id="tasty2" value="2">음? 이건 무슨맛..?
								</label>
								<label class="radio-inline">
									<input type="radio" name="tasty" id="tasty3" value="3">흠 그냥 그렇네
								</label>
								<label class="radio-inline">
									<input type="radio" name="tasty" id="tasty4" value="4">오 나쁘지 않은데?
								</label>
								<label class="radio-inline">
									<input type="radio" name="tasty" id="tasty5" value="5">헐 대박 존맛탱
								</label>
							</div>
						</div>
						<div class="form-group">
							<label for="price" class="col-sm-2 control-label">가격대(이하)</label>
							<div class="col-sm-10">
								<label class="radio-inline">
									<input type="radio" name="price" id="price1" value="1" checked>헐 넘 비쌈
								</label>
								<label class="radio-inline">
									<input type="radio" name="price" id="price2" value="2">비싸긴 하네
								</label>
								<label class="radio-inline">
									<input type="radio" name="price" id="price3" value="3">적당적당
								</label>
								<label class="radio-inline">
									<input type="radio" name="price" id="price4" value="4">싼편
								</label>
								<label class="radio-inline">
									<input type="radio" name="price" id="price5" value="5">오 싸다!
								</label>
							</div>
						</div>
						<div class="form-group">
							<div class="col-sm-12" style="text-align:center; margin-top:10px;">
								<a class="btn btn-success" id="listbtn" href="javascript:list()" role="button">식당 목록보기</a>
								<a class="btn btn-primary" id="selectbtn" href="javascript:select()" role="button">식당 뽑기</a>
							</div>
						</div>
					</form>
					<div id="list" style="display:none;"></div>
					<div id="result" style="display:none;">
						<table class="table table-bordered">
							<tr>
								<th style="width:15%">식당 이름</th>
								<th style="width:10%">거리</th>
								<th style="width:20%">맛</th>
								<th style="width:10%">가격대</th>
								<th style="width:10%">총점</th>
								<th style="width:35%">설명</th>
							</tr>
							<tr>
								<td id="rstname"></td>
								<td id="distance"></td>
								<td id="tasty"></td>
								<td id="price"></td>
								<td id="totalscore"></td>
								<td id="description"></td>
							</tr>
						</table>
					</div>
				</div>
			</div>
			<!-- 메시지 대화상자 -->
			<div id="dialog-message" title="" style="display:none">
				<p>
					<span class="ui-icon ui-icon-circle-check"
						style="float: left; margin: 0 7px 50px 0;"></span>
					<span id="msg"></span>
				</p>
			</div>
			
		목록보기나 뽑기를 클릭하면 먼저 코드체크 함수 호출
			코드입력창에 적힌 코드와 버튼의 아이디를 코드체크함수로 전달
			// 목록보기 버튼을 클릭하면 호출되는 함수
			function list(){
				// 코드체크 함수에 입력된 code와 클릭한 버튼의 id를 넘겨줌
				code = document.getElementById("code").value;
				btn = document.getElementById("listbtn").getAttribute("id");
				codecheck(code, btn);
			}
			
			// 식당 뽑기를 클릭하면 호출될 함수
			function select(){
				code = document.getElementById("code").value;
				btn = document.getElementById("selectbtn").getAttribute("id");
				codecheck(code, btn);
			}
			
		코드체크함수에서 존재하는 코드인지 체크하고 버튼의 아이디에 따라 각각 다른 함수 호출
			//존재하는 membercode 인지 확인하는 함수
			function codecheck(code, btn){
				//console.log("코드체크")
				$.ajax({
					url: "codecheck",
					type : "POST",
					data : {
						"membercode": code
						},
					dataType : "json",
					success: function(data){
						//console.log(data.result)
						if(data.result){
							// 존재하면 클릭한 버튼의 아이디를 구분해서 다음 함수 호출
							if(btn.indexOf("list") >= 0){
								listDisp();
							}else if(btn.indexOf("select") >= 0){
								selectDisp();
							}
						}else{
							// 존재하지 않는 코드면 코드 입력창으로 이동
							document.getElementById("msg").innerHTML="존재하지 않는 코드입니다.";
							$("#dialog-message").dialog({
								modal : true,
								buttons : {
									"닫기" : function() {
										$(this).dialog("close");
										document.getElementById("code").focus();
									}
								}
							});
						}
					}
				});
			}
			
		MemberService 인터페이스에 중복검사 메소드
			public boolean codecheck(HttpServletRequest requset);
			
		MemberServiceImpl 에서 membercode 중복검사
			Dao, mapper 에서는 있는 코드 사용
			
			@Override
			public boolean codecheck(HttpServletRequest request) {
				boolean result = false;
				String membercode = request.getParameter("membercode");
				if(memberDao.membercodecheck(membercode)==null) {
					result = false;
				}else{
					result = true;
				};
				return result;
			}
			
		JSONController에서 코드체크 결과 리턴
			@RequestMapping(value="lunch/codecheck", method=RequestMethod.POST)
			public Map<String, Object> codecheck(HttpServletRequest request) {
				boolean result = memberService.codecheck(request);
				Map<String, Object> map = new HashMap<>();
				map.put("result", result);
				return map;
			}
			
		코드체크 결과가 true 이고 목록보기 버튼을 누른 경우에 호출되는 함수
			// 입력된 사용자코드의 식당리스트를 가져오는 함수
			function listDisp(){
				document.getElementById("result").style.display = "none";
				// ajax를 이용해 전체 식당 리스트 불러오기
				$.ajax({
					url: "list",
					type : "POST",
					data : {
						"membercode": code
						},
					dataType : "json",
					success: function(data){
						if(listcheck(data) == true){
							//console.log(data)
							display(data);
						}
					}
				});
			}

			// 가져온 데이터를 출력하는 함수
			function display(data){
				disp = "<table class='table table-bordered'><tr>";
				disp += "<th style='width:8%;'>종류</th>";
				disp += "<th style='width:12%;'>식당 이름</th>";
				disp += "<th style='width:10%;'>거리</th>";
				disp += "<th style='width:18%;'>맛</th>";
				disp += "<th style='width:14%;'>가격대</th>";
				disp += "<th style='width:6%;'>총점</th>";
				disp += "<th style='width:27%;'>설명</th></tr>";
				$(data.list).each(function(idx,item){
					//console.log(item)
					disp += "<tr>";
					disp += "<td>" + item.foodstyle + "</td>";
					disp += "<td>" + item.rstname + "</td>";
					// distance, tasty, price는 변환해서 출력;
					switch(item.distance){
					case 1: 
						distance = "멂";
						break;
					case 2:
						distance = "멀지는 않음";
						break;
					case 3:
						distance = "적당함";
						break;
					case 4:
						distance = "가까운 편";
						break;
					case 5:
						distance = "가까움";
						break;
					}
					disp += "<td>" + distance + "</td>";
					switch(item.tasty){
					case 1:
						tasty = "으 노맛";
						break;
					case 2:
						tasty = "음? 이건 무슨맛?";
						break;
					case 3:
						tasty = "흠 그냥 그렇네";
						break;
					case 4:
						tasty = "오 나쁘지 않은데";
						break;
					case 5:
						tasty = "헐 대박 존맛탱";
						break;
					}
					disp += "<td>" + tasty + "</td>";
					switch(item.price){
					case 1:
						price = "헐 넘 비쌈";
						break;
					case 2:
						price = "비싸긴 하네";
						break;
					case 3:
						price = "적당적당";
						break;
					case 4:
						price = "싼편";
						break;
					case 5:
						price = "오 싸다!";
						break;
					}
					disp += "<td>" + price + "</td>";
					disp += "<td>" + item.totalscore + "</td>";
					disp += "<td>" + item.description + "</td>";
					disp += "</tr>"
				});
				disp += "</table>"
				document.getElementById("list").innerHTML = disp;
				document.getElementById("list").style.display = "block";
			}
			
		코드체크 결과가 true 이고 뽑기 버튼을 누른 경우에 호출되는 함수
			// 입력된 사용자코드의 식당중 조건에 맞는 식당에서 랜덤하게 1개 뽑기
			function selectDisp(){
				document.getElementById("list").style.display = "none";
				foodstyle = $("input[name='foodstyle']:checked").val();
				distance = $("input[name='distance']:checked").val();
				tasty = $("input[name='tasty']:checked").val();
				price = $("input[name='price']:checked").val();
				// console.log(distance +" " +tasty + " " +price)
				// ajax를 이용해 조건에 맞는 식당 리스트 불러오기
				$.ajax({
					url: "select",
					type : "POST",
					data : {
						"membercode": code,
						"foodstyle": foodstyle,
						"distance" : distance, 
						"tasty" : tasty,
						"price" : price	
						},
					dataType : "json",
					success: function(data){
						if(listcheck(data) == true){
							//console.log(data.list)
							// data.list에 저장된 배열에서 totalscore를 기반으로 랜덤하게 뽑기
							rstlist = data.list;
							random(rstlist);	
						};
					}
				});
			}

			// 식당 뽑기를 클릭했을 때 가져온 식당리스트가 있으면 호출되는 함수
			function random(rstlist){
				// 가져온 리스트 중에 랜덤하게 출력
				// totalscore를 기반으로 뽑힐 확률 조정
				// totalscore*10 개 만큼씩 배열에 넣어서 랜덤으로 뽑기
				scorelist = new Array();
				for(i=0; i<rstlist.length; i++){
					for(j=0; j<rstlist[i].totalscore*10;j++){
						scorelist.push(rstlist[i]);
					}
				}
				//console.log(scorelist);
				
				idx = Math.floor(Math.random() * scorelist.length);
				// console.log(idx)
				//console.log(scorelist[idx]);
				document.getElementById("result").style.display = "block";
				document.getElementById("rstname").innerText = scorelist[idx].rstname;
				// distance, tasty, price는 변환해서 출력;
				switch(scorelist[idx].distance){
				case 1: 
					distance = "멂";
					break;
				case 2:
					distance = "멀지는 않음";
					break;
				case 3:
					distance = "적당함";
					break;
				case 4:
					distance = "가까운 편";
					break;
				case 5:
					distance = "가까움";
					break;
				}
				document.getElementById("distance").innerText = distance;
				switch(scorelist[idx].tasty){
				case 1:
					tasty = "으 노맛";
					break;
				case 2:
					tasty = "음? 이건 무슨맛?";
					break;
				case 3:
					tasty = "흠 그냥 그렇네";
					break;
				case 4:
					tasty = "오 나쁘지 않은데";
					break;
				case 5:
					tasty = "헐 대박 존맛탱";
					break;
				}
				document.getElementById("tasty").innerText = tasty;
				switch(scorelist[idx].price){
				case 1:
					price = "헐 넘 비쌈";
					break;
				case 2:
					price = "비싸긴 하네";
					break;
				case 3:
					price = "적당적당";
					break;
				case 4:
					price = "싼편";
					break;
				case 5:
					price = "오 싸다!";
					break;
				}
				document.getElementById("price").innerText = price;
				document.getElementById("description").innerText = scorelist[idx].description;
				document.getElementById("totalscore").innerText = scorelist[idx].totalscore;
			}
			
		입력된 사용자코드의 식당이 하나도 없는 경우에 호출되는 함수
			// 등록된 식당이 있는지 확인하는 함수
			function listcheck(data){
				if(data.list == null || data.list.length==0){
					// 등록된 식당이 하나도 없으면 코드 입력창으로 이동
					document.getElementById("msg").innerHTML="등록된 식당이 없습니다.";
					$("#dialog-message").dialog({
						modal : true,
						buttons : {
							"닫기" : function() {
								$(this).dialog("close");
								document.getElementById("code").focus();
							}
						}
					});
					return false;
				}
				return true;
			}









































